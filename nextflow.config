// Define parameters as flat key-value pairs
params.traits_config = "/sc/arion/projects/psychgen/cotea02_prset/geneoverlap_nf/json_files/GWAS_input.json"
params.outdir = "/sc/arion/projects/psychgen/cotea02_prset/geneoverlap_nf/results"
params.num_random_sets = 1000
params.randomization_methods = ['birewire','keeppathsize']
params.bfile = "/sc/arion/projects/psychgen/cotea02_prset/subtyping/magma_test/g1000_eur"
params.geneset_real = "/sc/arion/projects/psychgen/cotea02_prset/geneoverlap/data/pathway_db/msigdb/c2.all.v2023.2.Hs.symbols.gmt_filtered.txt"
params.ukb_dir = "/sc/arion/projects/psychgen/cotea02_prset/geneoverlap_nf/data/ukb/"
params.gtf_reference = "/sc/arion/projects/psychgen/cotea02_prset/reference/Homo_sapiens.GRCh37.75.gtf.gz"

//workflow control parameters
params.run_magma = true
params.run_prset = true
params.run_empirical = true
params.run_opentargets = true
params.run_ot_viz = false
params.run_ot_correlation = true
params.run_tissue_correlation = true
params.run_malacards_correlation = true
params.run_delta_rank_ot         = true
params.run_delta_rank_malacards  = true
params.run_gsamixer = true

// GSA-MiXeR container command (uses singularity, consistent with gsamixer.sh)
params.mixer_sif = "/sc/arion/projects/psychgen/cotea02_prset/geneoverlap_nf/data/gsa_mixer/gsa-mixer.sif"
params.mixer_py  = "singularity exec --home pwd:/home ${params.mixer_sif} python /tools/mixer/precimed/mixer.py"

// References
params.mixer_ref_bim     = "/sc/arion/projects/psychgen/cotea02_prset/geneoverlap_nf/data/gsa_mixer/1000G_EUR_Phase3_plink/1000G.EUR.QC.@.bim"
params.mixer_ref_loadlib = "/sc/arion/projects/psychgen/cotea02_prset/geneoverlap_nf/data/gsa_mixer/1000G_EUR_Phase3_plink/1000G.EUR.QC.@.bin"
params.mixer_ref_annot   = "/sc/arion/projects/psychgen/cotea02_prset/geneoverlap_nf/data/gsa_mixer/1000G_EUR_Phase3_plink/baseline_v2.2_1000G.EUR.QC.@.annot.gz"

// Gene set annotation CSVs
params.mixer_go_base      = "/sc/arion/projects/psychgen/cotea02_prset/geneoverlap_nf/data/gsa_mixer/reference/gsa-mixer-baseline-annot_10mar2023.csv"
params.mixer_go_full      = "/sc/arion/projects/psychgen/cotea02_prset/geneoverlap_nf/data/gsa_mixer/reference/gsa-mixer-gene-annot_10mar2023.csv"
params.mixer_go_full_test = "/sc/arion/projects/psychgen/cotea02_prset/geneoverlap_nf/data/gsa_mixer/reference/gsa-mixer-hybridLOO-annot_10mar2023.csv"

// Any extra mixer flags, or empty
params.mixer_extra_flags = "--seed 1000 --hardprune-r2 0.6 --threads 8"

// Resources
process {
  withName: prepare_gsamixer_sumstats {
    executor = 'lsf'; queue = 'premium'; cpus = 1; memory = '15G'; time = '20m'
    clusterOptions = '-P acc_paul_oreilly'
  }
  withName: split_gsamixer_sumstats {
    executor = 'lsf'; queue = 'premium'; cpus = 1; memory = '4G'; time = '20m'
    clusterOptions = '-P acc_paul_oreilly'
  }
  withName: gsamixer_plsa_base {
    executor = 'lsf'; queue = 'premium'; cpus = 2; memory = '30G'; time = '10h'
    clusterOptions = '-P acc_paul_oreilly'
  }
  withName: gsamixer_plsa_full {
    executor = 'lsf'; queue = 'premium'; cpus = 2; memory = '40G'; time = '24h'
    clusterOptions = '-P acc_paul_oreilly'
  }
  withName: convert_random_gmt_for_gsamixer {
    executor = 'lsf'; queue = 'premium'; cpus = 1; memory = '4G'; time = '1h'
    clusterOptions = '-P acc_paul_oreilly'
  }
  withName: gsamixer_plsa_full_random {
    executor = 'lsf'; queue = 'premium'; cpus = 2; memory = '40G'; time = '24h'
    clusterOptions = '-P acc_paul_oreilly'
  }
  withName: convert_gmt_for_gsamixer {
    executor = 'lsf'
    queue = 'premium'
    cpus = 1
    memory = '4G'
    time = '20m'
    clusterOptions = '-P acc_paul_oreilly'
  }
}

// Directory containing OpenTargets associationByDatatypeDirect JSON files
params.opentargets_json_dir = "/sc/arion/projects/psychgen/cotea02_prset/geneoverlap/results/drugtarget_test/associationByDatatypeDirect"

// Comma-separated top-N lists to evaluate in delta-rank scripts
params.delta_rank_top_ns = "50,100,250,500"

params {
  background = 'msigdbgenes'

  gene_files = [
    msigdbgenes: "/sc/arion/projects/psychgen/cotea02_prset/geneoverlap/data/msigdbgenes.regions",
    realgenes  : "/sc/arion/projects/psychgen/cotea02_prset/geneoverlap/data/proteincoding.regions"
  ]
  
  // GMT directories for different randomization methods
  gmt_dirs = [
    birewire: "/sc/arion/projects/psychgen/cotea02_prset/geneoverlap/data/randomized_gene_sets/random_birewire_10k",
    keeppathsize: "/sc/arion/projects/psychgen/cotea02_prset/geneoverlap/data/randomized_gene_sets/random_keeppathsize_10k"
  ]

  // Directory for scripts
  scripts_dir = "${projectDir}/scripts"

  opentargets_supported_traits = [
    "t2d", "cad", "ad", "mdd", "scz", "ibd", "breast"
  ]

  opentargets_n_values = "10,20,50,100"

  // tissue specificity data
    tissue_expression_data = "/sc/arion/projects/psychgen/cotea02_prset/judit_revisions/software/1kg_test/GeneExpressionLandscape/data/Exp_Spe_DataTables/specificity"

  opentargets_sig_threshold = 0.00625

  malacards_path = "/sc/arion/projects/psychgen/cotea02_prset/geneoverlap_nf/data/Malacards"

  // Only run MalaCards for these traits (case-insensitive)
  malacards_traits = 'bmi,cad,t2d,mdd,ad,scz,ibd,breast'
}

// for job submission
process{
  withName: run_random_sets {
    executor = 'lsf'
    queue='premium'
    clusterOptions='-P acc_paul_oreilly'
    cpus = '1'
    memory = '4G'
    time = '1h'
  }
  withName: run_gene_analysis {
    executor = 'lsf'
    queue='premium'
    clusterOptions = '-P acc_paul_oreilly'
    cpus = '1'
    memory = '50000 MB'
    time = '5h'
  }
  withName: gwas_remove_dup_snps {
    executor = 'lsf'
    queue='premium'
    cpus = '1'
    memory = '16G'
    time = '20m'
    clusterOptions = '-P acc_paul_oreilly'
  }
  withName: run_random_sets_prset {
    executor = 'lsf'
    queue='premium'
    cpus = '22'
    time = '2h'
    clusterOptions = '-P acc_paul_oreilly -R "rusage[mem=2500],span[hosts=1]"'
  }
  withName: calc_empirical_pvalues {
    executor = 'lsf'
    queue = 'premium'
    clusterOptions = '-P acc_paul_oreilly'
    cpus = '1'
    memory = '50G'
    time = '2h'
  }
  withName: 'opentargets_stats_correlation' {
    executor = 'lsf'
    queue = 'premium'
    clusterOptions = '-P acc_paul_oreilly'
    cpus = '1'
    memory = '12G'
    time = '0.5h'
  }
  withName: 'tissue_correlation_analysis' {
    executor = 'lsf'
    queue = 'premium'
    clusterOptions = '-P acc_paul_oreilly'
    cpus = '2'
    memory = '10G'
    time = '0.5h'
  }
  withName: 'malacards_correlation' {
    executor = 'lsf'
    queue = 'premium'
    clusterOptions = '-P acc_paul_oreilly'
    cpus = '1'
    memory = '8G'
    time = '30m'
  }
  // Optional: resources for the new steps
  withName: 'delta_rank_ot_correlation' {
    executor = 'lsf'
    queue = 'premium'
    clusterOptions = '-P acc_paul_oreilly'
    cpus = '1'
    memory = '6G'
    time = '1h'
  }
  withName: 'delta_rank_malacards_correlation' {
    executor = 'lsf'
    queue = 'premium'
    clusterOptions = '-P acc_paul_oreilly'
    cpus = '1'
    memory = '6G'
    time = '1h'
  }
  withName: run_real_prset {
    executor = 'lsf'
    queue='premium'
    cpus = '22'
    time = '2h'
    clusterOptions = '-P acc_paul_oreilly -R "rusage[mem=2500],span[hosts=1]"'
  }
  withName: calculate_fpr {
    executor = 'lsf'
    queue = 'premium'
    clusterOptions = '-P acc_paul_oreilly'
    cpus = '1'
    memory = '8G'
    time = '1h'
  }
}

executor {
  queueSize = 500
}
